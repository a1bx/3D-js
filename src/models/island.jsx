import { useRef, useEffect} from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import { a } from "@react-spring/three";

 import islandScene from "../assets/3d/islandscene.glb"

const Island =(props)=>{
  const islandRef = useRef();
  const { nodes, materials } = useGLTF(islandScene);
  return (
    <a.group ref={islandRef}{...props}>
      <a.group
        position={ [-0.5, 0.5, 0.5]}
        rotation={ [Math.PI / 2, 0, 0]}
      >
        <a.group position={[3.745, 3.713, -19.289]}>
          <mesh 
            geometry={nodes.Fortress_Fortress_0.geometry}
            material={materials.Fortress}
          />
          <mesh 
            geometry={nodes.Fortress_Fortress_0_1.geometry}
            material={materials.Fortress}
          />
          <mesh 
            geometry={nodes.Fortress_Fortress_0_2.geometry}
            material={materials.Fortress}
          />
          <mesh 
            geometry={nodes.Fortress_Environment_0.geometry}
            material={materials.Environment}
          />
          <mesh 
            geometry={nodes.Fortress_Sand_0.geometry}
            material={materials.Sand}
          />
        </a.group>
      </a.group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Sea_Sea_0.geometry}
        material={materials.material}
        position={[-1.388, 326.224, 14.92]}
        rotation={[-Math.PI / 2, 0, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Sky_Sky_0.geometry}
        material={materials.material_4}
        rotation={[-Math.PI / 2, 0, 0]}
      />
    </a.group>
  );
}

export default Island;
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Artjoms Horosilovs (https://sketchfab.com/Artjoms_Horosilovs)
License: CC-BY-NC-SA-4.0 (http://creativecommons.org/licenses/by-nc-sa/4.0/)
Source: https://sketchfab.com/3d-models/sea-keep-lonely-watcher-09a15a0c14cb4accaf060a92bc70413d
Title: Sea Keep "Lonely Watcher"
 

import * as THREE from "three";
import React, { useRef, useMemo, useContext, createContext } from "react";
import { useGLTF, Merged } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Fortress_Fortress_0: THREE.Mesh;
    Fortress_Fortress_0_1: THREE.Mesh;
    Fortress_Fortress_0_2: THREE.Mesh;
    Fortress_Environment_0: THREE.Mesh;
    Fortress_Sand_0: THREE.Mesh;
    Sea_Sea_0: THREE.Mesh;
    Sky_Sky_0: THREE.Mesh;
  };
  materials: {
    Fortress: THREE.MeshStandardMaterial;
    Environment: THREE.MeshStandardMaterial;
    Sand: THREE.MeshStandardMaterial;
    material: THREE.MeshStandardMaterial;
    material_4: THREE.MeshStandardMaterial;
  };
};

const context = createContext();
export function Instances({ children, ...props }) {
  const { nodes } = useGLTF("/islandscene.glb") as GLTFResult;
  const instances = useMemo(
    () => ({
      FortressFortress: nodes.Fortress_Fortress_0,
      FortressFortress1: nodes.Fortress_Fortress_0_1,
      FortressFortress2: nodes.Fortress_Fortress_0_2,
      FortressEnvironment: nodes.Fortress_Environment_0,
      FortressSand: nodes.Fortress_Sand_0,
      SeaSea: nodes.Sea_Sea_0,
      SkySky: nodes.Sky_Sky_0,
    }),
    [nodes]
  );
  return (
    <Merged meshes={instances} {...props}>
      {(instances) => (
        <context.Provider value={instances} children={children} />
      )}
    </Merged>
  );
}

export function Model(props: JSX.IntrinsicElements["group"]) {
  const instances = useContext(context);
  return (
    <group {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group
          name="Sketchfab_model"
          rotation={[-Math.PI / 2, 0, 0]}
          userData={{ name: "Sketchfab_model" }}
        >
          <group
            name="ef0dcba82d2d448fbfe0ca97f8fadd87fbx"
            rotation={[Math.PI / 2, 0, 0]}
            userData={{ name: "ef0dcba82d2d448fbfe0ca97f8fadd87.fbx" }}
          >
            <group name="RootNode" userData={{ name: "RootNode" }}>
              <group
                name="Fortress"
                position={[17.117, 218.356, 23.591]}
                rotation={[-Math.PI / 2, 0, Math.PI]}
                userData={{ name: "Fortress" }}
              >
                <group
                  name="Object_4"
                  position={[33.745, 38.713, -60.289]}
                  userData={{ name: "Object_4" }}
                >
                  <instances.FortressFortress
                    name="Fortress_Fortress_0"
                    userData={{ name: "Fortress_Fortress_0" }}
                  />
                  <instances.FortressFortress1
                    name="Fortress_Fortress_0_1"
                    userData={{ name: "Fortress_Fortress_0" }}
                  />
                  <instances.FortressFortress2
                    name="Fortress_Fortress_0_2"
                    userData={{ name: "Fortress_Fortress_0" }}
                  />
                  <instances.FortressEnvironment
                    name="Fortress_Environment_0"
                    userData={{ name: "Fortress_Environment_0" }}
                  />
                  <instances.FortressSand
                    name="Fortress_Sand_0"
                    userData={{ name: "Fortress_Sand_0" }}
                  />
                </group>
              </group>
              <group
                name="Sea"
                position={[-1.388, 326.224, 14.92]}
                rotation={[-Math.PI / 2, 0, 0]}
                userData={{ name: "Sea" }}
              >
                <instances.SeaSea
                  name="Sea_Sea_0"
                  userData={{ name: "Sea_Sea_0" }}
                />
              </group>
              <group
                name="Sky"
                rotation={[-Math.PI / 2, 0, 0]}
                userData={{ name: "Sky" }}
              >
                <instances.SkySky
                  name="Sky_Sky_0"
                  userData={{ name: "Sky_Sky_0" }}
                />
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/islandscene.glb");
*/